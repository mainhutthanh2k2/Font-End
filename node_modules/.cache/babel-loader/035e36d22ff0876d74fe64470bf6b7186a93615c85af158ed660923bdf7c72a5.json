{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SMS = void 0;\nconst server_client_1 = require(\"@vonage/server-client\");\nconst index_1 = require(\"./classes/index\");\nconst index_2 = require(\"./enums/index\");\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst auth_1 = require(\"@vonage/auth\");\nclass SMS extends server_client_1.Client {\n  async send(params) {\n    const resp = await this.sendPostRequest(`${this.config.restHost}/sms/json`, server_client_1.Client.transformers.kebabCaseObjectKeys(params));\n    const messageData = server_client_1.Client.transformers.camelCaseObjectKeys(resp.data, true, true);\n    const totalMessages = messageData.messageCount || 0;\n    const messages = messageData.messages || [];\n    const failures = messages.reduce((failures, {\n      status\n    }) => status !== index_2.SMSStatus.SUCCESS ? failures + 1 : failures, 0);\n    if (failures < 1) {\n      return messageData;\n    }\n    if (failures === totalMessages) {\n      throw new index_1.MessageSendAllFailure(messageData);\n    }\n    throw new index_1.MessageSendPartialFailure(messageData);\n  }\n  verifySignature(signature, params, signatureSecret, algorithm) {\n    params = params || {};\n    let signedQuery = '';\n    params = JSON.parse(JSON.stringify(params));\n    if (params.sig) {\n      delete params.sig;\n    }\n    Object.keys(params).sort().forEach(key => {\n      // replace & and = with _\n      signedQuery += '&' + key + '=' + params[key].replace(/[&=]/g, '_');\n    });\n    const hashMap = {};\n    hashMap[auth_1.AlgorithmTypes.md5hmac] = 'md5';\n    hashMap[auth_1.AlgorithmTypes.sha1hmac] = 'sha1';\n    hashMap[auth_1.AlgorithmTypes.sha256hmac] = 'sha256';\n    hashMap[auth_1.AlgorithmTypes.sha512hmac] = 'sha512';\n    let hash = '';\n    switch (algorithm) {\n      case auth_1.AlgorithmTypes.md5hash:\n        signedQuery += signatureSecret;\n        hash = crypto_1.default.createHash('md5').update(signedQuery).digest('hex');\n        break;\n      case auth_1.AlgorithmTypes.md5hmac:\n      case auth_1.AlgorithmTypes.sha1hmac:\n      case auth_1.AlgorithmTypes.sha256hmac:\n      case auth_1.AlgorithmTypes.sha512hmac:\n        hash = crypto_1.default.createHmac(hashMap[algorithm], signatureSecret).update(signedQuery).digest('hex');\n        break;\n      default:\n        throw new Error(`Unknown signature algorithm: ${algorithm}. Expected: md5hash, md5, sha1, sha256, or sha512`);\n    }\n    return signature.toUpperCase() === hash.toUpperCase();\n  }\n}\nexports.SMS = SMS;","map":{"version":3,"names":["server_client_1","require","index_1","index_2","crypto_1","__importDefault","auth_1","SMS","Client","send","params","resp","sendPostRequest","config","restHost","transformers","kebabCaseObjectKeys","messageData","camelCaseObjectKeys","data","totalMessages","messageCount","messages","failures","reduce","status","SMSStatus","SUCCESS","MessageSendAllFailure","MessageSendPartialFailure","verifySignature","signature","signatureSecret","algorithm","signedQuery","JSON","parse","stringify","sig","Object","keys","sort","forEach","key","replace","hashMap","AlgorithmTypes","md5hmac","sha1hmac","sha256hmac","sha512hmac","hash","md5hash","default","createHash","update","digest","createHmac","Error","toUpperCase","exports"],"sources":["../lib/sms.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}